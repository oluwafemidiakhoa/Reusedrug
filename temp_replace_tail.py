from pathlib import Path
path = Path('web-app/components/ResultsList.tsx')
text = path.read_text(encoding='utf-8', errors='ignore')
start = text.index('  const cacheMessage =')
lines = [
  '  const cacheMessage =',
  '    backendCached || bffCached',
  '      ? ',
  '      : null;',
  '',
  '  const authenticated = status === "authenticated" && Boolean(session?.apiKey);',
  '',
  '  const handleSave = () => {',
  '    if (!authenticated) {',
  '      signIn(undefined, { callbackUrl: "/workspace" });',
  '      return;',
  '    }',
  '    if (!candidates.length) {',
  '      setMessage("No results to save yet.");',
  '      return;',
  '    }',
  '    setMessage(null);',
  '    startTransition(async () => {',
  '      try {',
  '        const response = await fetch("/api/workspace/queries", {',
  '          method: "POST",',
  '          headers: { "Content-Type": "application/json" },',
  '          body: JSON.stringify({',
  '            disease: query,',
  '            response: {',
  '              query,',
  '              normalized_disease: normalizedDisease,',
  '              candidates,',
  '              warnings,',
  '              cached: Boolean(backendCached),',
  '              related_concepts: relatedConcepts,',
  '            },',
  '          }),',
  '        });',
  '        if (!response.ok) {',
  '          throw new Error("Failed to save");',
  '        }',
  '        setMessage("Saved to workspace");',
  '      } catch (error) {',
  '        setMessage((error as Error).message ?? "Failed to save");',
  '      }',
  '    });',
  '  };',
  '',
  '  const classificationChips = useMemo(() => {',
  '    if (!filteredCandidates.length) {',
  '      return [];',
  '    }',
  '    const set = new Set<string>();',
  '    filteredCandidates.forEach((candidate) => {',
  '      Object.values(FILTER_DEFS).forEach((def) => {',
  '        if (candidate.evidence.some((item) => def.sources.includes(item.source))) {',
  '          set.add(def.label);',
  '        }',
  '      });',
  '    });',
  '    return Array.from(set);',
  '  }, [filteredCandidates]);',
  '',
  '  return (',
  '    <div className="flex flex-col gap-8">',
  '      <SectionHeader',
  '        eyebrow="Evidence synthesis"',
  '        title={}',
  '        description="Ranked by composite score with calibrated confidence intervals across all evidence channels."',
  '        actions={',
  '          <button',
  '            onClick={handleSave}',
  '            disabled={isPending || !candidates.length}',
  '            className="inline-flex items-center gap-2 rounded-full border border-primary-500/50 px-4 py-2 text-sm font-semibold text-primary-200 transition hover:border-primary-300 hover:text-primary-100 disabled:cursor-not-allowed disabled:border-slate-700 disabled:text-slate-500"',
  '          >',
  '            {authenticated ? (isPending ? "Saving..." : "Save to workspace") : "Sign in to save"}',
  '          </button>',
  '        }',
  '      />',
  '',
  '      <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">',
  '        <Metric',
  '          label="Top confidence"',
  '          value={highConfidence ? highConfidence.toFixed(2) : "â€”"}',
  '          trend="up"',
  '          hint={lowConfidence ?  : undefined}',
  '        />',
  '        <Metric',
  '          label="Candidates surfaced"',
  '          value={filteredCandidates.length}',
  '          hint={}',
  '        />',
  '        <Metric',
  '          label="Warnings"',
  '          value={totalWarnings}',
  '          trend={totalWarnings ? "warning" : "steady"}',
  '          hint={cacheMessage ?? "fresh"}',
  '        />',
  '        <Metric',
  '          label="Evidence density"',
  '          value={topCandidate ? topCandidate.evidence.length : 0}',
  '          hint="sources per lead"',
  '        />',
  '      </div>',
  '',
  '      <Card',
  '        title={normalizedDisease ?  : "Disease normalization"}',
  '        description="Concept harmonisation via UMLS and Translator ontologies ensures downstream evidence is aligned."',
  '      >',
  '        <div className="flex flex-wrap gap-2">',
  '          {conceptSummary ? <Chip tone="info">{conceptSummary}</Chip> : <Chip>No normalized concept available</Chip>}',
  '          {conceptSynonyms.map((synonym) => (',
  '            <Chip key={synonym}>{synonym}</Chip>',],
